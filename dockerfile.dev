# Development Dockerfile

FROM eclipse-temurin:17 AS jdk
FROM python:3.10-slim AS dev

# Install build dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends ca-certificates curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy Python requirements and install
COPY requirements.txt requirements-dev.txt ./
RUN pip install --no-cache-dir --upgrade pip setuptools wheel \
    && pip install --no-cache-dir -r requirements.txt \
    && pip install --no-cache-dir -r requirements-dev.txt \
    && rm -rf /root/.cache/pip

# Get the SPDX License List latest release tag via GitHub API,
# download the tarball, extract needed JSON and JSON-LDfiles
RUN set -eux; \
    mkdir -p /licenses/current; \
    api_url="https://api.github.com/repos/spdx/license-list-data/releases/latest"; \
    tag=$(curl -sSL "$api_url" | python -c "import sys, json; print(json.load(sys.stdin)['tag_name'])"); \
    tarball_url="https://github.com/spdx/license-list-data/archive/refs/tags/${tag}.tar.gz"; \
    mkdir -p /licenses; cd /licenses; \
    curl -sSL "$tarball_url" -o license-list-data.tar.gz; \
    mkdir tmp && tar -xzf license-list-data.tar.gz -C tmp --strip-components=1; \
    mkdir -p /licenses/current; cp tmp/website/*.jsonld /licenses/current || true; \
    cp tmp/website/licenses.json /licenses/current || true; \
    cp tmp/website/exceptions.json /licenses/current || true; \
    rm -rf tmp license-list-data.tar.gz 

# Remove build-only packages and clean apt caches to reduce image size
RUN apt-get purge -y --auto-remove ca-certificates curl || true && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Copy JDK
ENV JAVA_HOME=/opt/java/openjdk
COPY --from=jdk $JAVA_HOME $JAVA_HOME
ENV PATH="${JAVA_HOME}/bin:${PATH}"

# Ensure java/jar are available on the default PATH
# by symlinking into /usr/local/bin
RUN ln -sf "$JAVA_HOME/bin/java" /usr/local/bin/java \
    && ln -sf "$JAVA_HOME/bin/jar" /usr/local/bin/jar

# Create the volume /spdx which maps to the host
VOLUME [ "/spdx" ]

# Move to spdx folder
WORKDIR /spdx

# Expose the port 8000 to publish
EXPOSE 8000

# Run migrations and start the development server on port 8000
CMD ["sh", "-c", "python src/manage.py migrate && python src/manage.py collectstatic --noinput && python src/populate.py && python src/manage.py runserver 0.0.0.0:8000"]
